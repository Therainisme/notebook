(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{425:function(a,t,s){"use strict";s.r(t);var e=s(45),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[a._v("#")]),a._v(" Array")]),a._v(" "),s("h2",{attrs:{id:"可迭代对象转换成数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可迭代对象转换成数组"}},[a._v("#")]),a._v(" 可迭代对象转换成数组")]),a._v(" "),s("h3",{attrs:{id:"of-和-from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#of-和-from"}},[a._v("#")]),a._v(" "),s("code",[a._v("of")]),a._v(" 和 "),s("code",[a._v("from")])]),a._v(" "),s("p",[s("code",[a._v("Array.of(a, b, c, d, e)")]),a._v(" 将会转化为 "),s("code",[a._v("[a, b, c, d, e]")]),a._v(";")]),a._v(" "),s("p",[s("code",[a._v("Array.from(xxxx)")]),a._v(" 参数 "),s("code",[a._v("xxxx")]),a._v(" 可以尝试一下任何可迭代对象，它会尝试转化成数组。需要注意的这里是浅拷贝。")]),a._v(" "),s("h2",{attrs:{id:"填充数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#填充数组"}},[a._v("#")]),a._v(" 填充数组")]),a._v(" "),s("h3",{attrs:{id:"fill-value-start-end"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fill-value-start-end"}},[a._v("#")]),a._v(" "),s("code",[a._v("fill(value, start?, end?)")])]),a._v(" "),s("p",[a._v("分别是需要填充的值，开始的下标，结束的下标 "),s("code",[a._v("[start, end)")]),a._v("。")]),a._v(" "),s("h2",{attrs:{id:"排序数组、反转数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序数组、反转数组"}},[a._v("#")]),a._v(" 排序数组、反转数组")]),a._v(" "),s("p",[a._v("注意，它们都会返回数组的引用。")]),a._v(" "),s("h3",{attrs:{id:"reverse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[a._v("#")]),a._v(" "),s("code",[a._v("reverse()")])]),a._v(" "),s("p",[a._v("它会在数组上操作，将数组反向。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"sort-a-b-a-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sort-a-b-a-b"}},[a._v("#")]),a._v(" "),s("code",[a._v("sort((a,b)=>a-b)")])]),a._v(" "),s("p",[a._v("这是一个高阶函数，会返回一个排序好的"),s("code",[a._v("数组")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"数组切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组切片"}},[a._v("#")]),a._v(" 数组切片")]),a._v(" "),s("h3",{attrs:{id:"a-slice-start-end"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-slice-start-end"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.slice(start?, end?)")])]),a._v(" "),s("p",[s("code",[a._v("slice()")]),a._v(" 会通过传入的两个参数返回在这两个参数之间的值而组成的数组。")]),a._v(" "),s("h2",{attrs:{id:"搜索数组某个元素位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搜索数组某个元素位置"}},[a._v("#")]),a._v(" 搜索数组某个元素位置")]),a._v(" "),s("h3",{attrs:{id:"a-indexof-value-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-indexof-value-start"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.indexOf(value, start?)")])]),a._v(" "),s("p",[a._v("需要查找的值和开始的下标。")]),a._v(" "),s("h3",{attrs:{id:"a-includes-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-includes-value"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.includes(value)")])]),a._v(" "),s("p",[a._v("会找传入的值是否在数组中，使用 "),s("code",[a._v("===")]),a._v(" 比较。")]),a._v(" "),s("h2",{attrs:{id:"迭代数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代数组"}},[a._v("#")]),a._v(" 迭代数组")]),a._v(" "),s("p",[a._v("这几个方法都长这样 "),s("code",[a._v("a.xxx((value, index, self) => {return xxx})")])]),a._v(" "),s("h3",{attrs:{id:"a-every-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-every-callback"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.every(callback)")])]),a._v(" "),s("p",[a._v("如果每次回调都为真才返回真。")]),a._v(" "),s("h3",{attrs:{id:"a-some-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-some-callback"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.some(callback)")])]),a._v(" "),s("p",[a._v("只要有一次回调为真即为真，且后续的回调将不再被执行。")]),a._v(" "),s("h3",{attrs:{id:"a-filter-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-filter-callback"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.filter(callback)")])]),a._v(" "),s("p",[a._v("只有回调为真的时候，这个元素才会被保留下来。返回一个新数组的引用。")]),a._v(" "),s("h3",{attrs:{id:"a-foreach-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-foreach-callback"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.forEach(callback)")])]),a._v(" "),s("p",[a._v("普普通通的遍历函数，和 "),s("code",[a._v("for")]),a._v(" 一样。")]),a._v(" "),s("h3",{attrs:{id:"a-map-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-map-callback"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.map(callback)")])]),a._v(" "),s("p",[a._v("函数映射，创建一个新数组，就像函数一样映射它们。")]),a._v(" "),s("h2",{attrs:{id:"归并数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并数组"}},[a._v("#")]),a._v(" 归并数组")]),a._v(" "),s("h3",{attrs:{id:"a-reduce-pre-now-index-self-return-rtv-init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-reduce-pre-now-index-self-return-rtv-init"}},[a._v("#")]),a._v(" "),s("code",[a._v("a.reduce((pre, now, index, self) => return rtv, init)")])]),a._v(" "),s("p",[s("code",[a._v("pre")]),a._v(" 上一个返回值\n"),s("code",[a._v("now")]),a._v(" 现在的值\n"),s("code",[a._v("index")]),a._v(" 现在值的下标\n"),s("code",[a._v("self")]),a._v(" 数组自己")]),a._v(" "),s("p",[s("code",[a._v("init")]),a._v(" 初始值，是 "),s("code",[a._v("reduce")]),a._v(" 函数的第二个参数。")])])}),[],!1,null,null,null);t.default=r.exports}}]);